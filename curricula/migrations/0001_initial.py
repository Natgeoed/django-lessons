# -*- coding: utf-8 -*-


from django.db import models, migrations
import bitfield.models
import mptt.fields
import edumetadata.fields
import concepts.managers


class Migration(migrations.Migration):

    dependencies = [
        ('acknowledge', '0001_initial'),
        ('core_media', '0001_initial'),
        ('licensing', '0001_initial'),
        ('credits', '0001_initial'),
        ('concepts', '0001_initial'),
        ('reference', '0001_initial'),
        ('resource_carousel', '0001_initial'),
        ('contenttypes', '0001_initial'),
        ('edumetadata', '0001_squashed_0003_change_array_field_type'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('accessibility_notes', models.TextField(null=True, blank=True)),
                ('ads_excluded', models.BooleanField(default=True, help_text=b'If unchecked, this field indicates that external ads are\n        allowed.', verbose_name=b'Are ads excluded?')),
                ('appropriate_for', bitfield.models.BitField([b'Educator', b'Informal Educator', b'Family', b'Student', b'Kid'], default=None, help_text=b'Select the audience(s) for which this content is\n        appropriate. Selecting audiences means that a separate audience view of\n        the page will exist for those audiences.\n\n        Note that the text you input in this form serves as the default text.\n        If you indicate this activity is appropriate for multiple audiences,\n        you either need to add text variations or the default text must be\n        appropriate for those audiences.')),
                ('assessment', models.TextField(null=True, blank=True)),
                ('assessment_type', models.CharField(blank=True, max_length=15, null=True, choices=[(b'alternative', b'Alternative Assessment'), (b'authentic', b'Authentic Assessment'), (b'formal', b'Formal Assessment'), (b'formative', b'Formative Assessment'), (b'informal', b'Informal Assessment'), (b'observation', b'Observation'), (b'peer-evaluation', b'Peer Evaluation'), (b'portfolio', b'Portfolio Assessment'), (b'rubric', b'Rubric'), (b'self', b'Self Assessment'), (b'standardized', b'Standardized Testing'), (b'testing', b'Testing')])),
                ('background_information', models.TextField(help_text=b'If this activity is part of an already-created lesson and\n        you update the background information, you must also make the same\n        change in lesson for this field.', null=True, blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('directions', models.TextField(null=True, blank=True)),
                ('duration', models.IntegerField(verbose_name=b'Duration Minutes')),
                ('extending_the_learning', models.TextField(null=True, blank=True)),
                ('id_number', models.CharField(help_text=b'This field is for the internal NG Education ID number. This is required for all instructional content.', max_length=10)),
                ('internet_access_type', models.IntegerField(blank=True, null=True, choices=[(1, b'No'), (2, b'Optional'), (3, b'Required')])),
                ('is_modular', models.BooleanField(default=True, help_text=b'If unchecked, this field indicates that this activity\n        should not appear as stand-alone outside of a lesson view.')),
                ('last_updated_date', models.DateTimeField(auto_now=True)),
                ('notes_on_readability_score', models.TextField(help_text=b'Use this internal-use only field to record any details\n        related to the readability of reading passages, such as those on\n        handouts. Include Lexile score, grade-level equivalent, and any\n        criteria used to determine why a higher score is acceptable\n        (proper nouns, difficult vocabulary, etc.).', null=True, blank=True)),
                ('other_notes', models.TextField(null=True, blank=True)),
                ('pedagogical_purpose_type', models.SmallIntegerField(blank=True, null=True, choices=[(1, b'apply'), (4, b'assess'), (2, b'develop'), (3, b'engage'), (5, b'inquiry')])),
                ('prior_knowledge', models.TextField(null=True, blank=True)),
                ('published', models.BooleanField(default=False)),
                ('published_date', models.DateTimeField(null=True, blank=True)),
                ('relevant_start_date', edumetadata.fields.HistoricalDateField(null=True, blank=True)),
                ('relevant_end_date', edumetadata.fields.HistoricalDateField(null=True, blank=True)),
                ('setup', models.TextField(null=True, blank=True)),
                ('slug', models.SlugField(help_text=b'The URL slug is auto-generated, but producers should adjust\n        it if: a) punctuation in the title causes display errors; and/or b) the\n        title changes after the slug has been generated.', unique=True, max_length=100)),
                ('subtitle_guiding_question', models.TextField(verbose_name=b'Subtitle or Guiding Question')),
                ('title', models.CharField(help_text=b'GLOBAL: Use the text variations field to create versions\n        for audiences other than the default.', max_length=256)),
                ('concepts', concepts.managers.ConceptManager(to='concepts.Concept', through='concepts.ConceptItem', help_text='Press return to complete each tag.', verbose_name='Concepts')),
                ('credit', models.ForeignKey(blank=True, to='credits.CreditGroup', null=True)),
                ('eras', models.ManyToManyField(to='edumetadata.HistoricalEra', null=True, blank=True)),
                ('geologic_time', models.ForeignKey(blank=True, to='edumetadata.GeologicTime', null=True)),
                ('grades', models.ManyToManyField(to='edumetadata.Grade', null=True, blank=True)),
            ],
            options={
                'ordering': ['title'],
                'verbose_name_plural': 'Activities',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ActivityRelation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('object_id', models.PositiveIntegerField()),
                ('relation_type', models.CharField(choices=[(b'Add this', b'Add this'), (b'Content Footer', b'Content Footer'), (b'key_image', b'Key Image'), (b'Model Student Work', b'Model of Student Work'), (b'Page footer', b'Page footer'), (b'Pictures of Practice', b'Pictures of Practice'), (b'resource_carousel', b'Resource Carousel (old)'), (b'resource_carousel_slide', b'Resource Carousel Slide'), (b'Right Rail Primary', b'Right Rail Primary'), (b'Right Rail Secondary', b'Right Rail Secondary')], max_length=b'200', blank=True, help_text=b"A generic text field to tag a relation, like 'primaryphoto'.", null=True, verbose_name=b'Relation Type')),
                ('activity', models.ForeignKey(related_name='relations', to='curricula.Activity')),
                ('content_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CategoryIdea',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='GroupingType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Idea',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated_date', models.DateTimeField(auto_now=True)),
                ('appropriate_for', bitfield.models.BitField([b'Educator', b'Informal Educator', b'Family', b'Student', b'Kid'], default=None, help_text=b'Select the audience(s) for which this content is\n        appropriate.')),
                ('title', models.CharField(max_length=256, null=True)),
                ('id_number', models.CharField(help_text=b'This field is for the internal NG Education ID number. This\n        is required for all instructional content.', max_length=10, null=True)),
                ('content_body', models.TextField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IdeaCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated_date', models.DateTimeField(auto_now=True)),
                ('appropriate_for', bitfield.models.BitField([b'Educator', b'Informal Educator', b'Family', b'Student', b'Kid'], default=None, help_text=b'Select the audience(s) for which this content is\n        appropriate.')),
                ('title', models.CharField(max_length=256)),
                ('slug', models.SlugField(help_text=b'The URL slug is auto-generated, but producers should adjust\n        it if: a) punctuation in the title causes display errors; and/or b) the\n        title changes after the slug has been generated.', unique=True)),
                ('subtitle_guiding_question', models.TextField(null=True, verbose_name=b'Subtitle or Guiding Question', blank=True)),
                ('description', models.TextField()),
                ('id_number', models.CharField(help_text=b'This field is for the internal NG Education ID number. This\n        is required for all instructional content.', max_length=10, null=True)),
                ('content_body', models.TextField()),
                ('relevant_start_date', edumetadata.fields.HistoricalDateField(null=True, blank=True)),
                ('relevant_end_date', edumetadata.fields.HistoricalDateField(null=True, blank=True)),
                ('published', models.BooleanField(default=False)),
                ('published_date', models.DateTimeField(null=True, blank=True)),
                ('credit', models.ForeignKey(blank=True, to='credits.CreditGroup', null=True)),
                ('eras', models.ManyToManyField(to='edumetadata.HistoricalEra', null=True, blank=True)),
                ('geologic_time', models.ForeignKey(blank=True, to='edumetadata.GeologicTime', null=True)),
                ('grades', models.ManyToManyField(to='edumetadata.Grade', null=True, blank=True)),
                ('key_image', models.ForeignKey(to='core_media.NGPhoto')),
                ('license_name', models.ForeignKey(default=23, blank=True, to='licensing.GrantedLicense', null=True)),
                ('secondary_content_types', models.ManyToManyField(to='edumetadata.AlternateType', null=True, blank=True)),
                ('subjects', models.ManyToManyField(to='edumetadata.Subject', null=True, verbose_name=b'Subjects and Disciplines', blank=True)),
            ],
            options={
                'verbose_name_plural': 'Idea categories',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IdeaCategoryRelation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('object_id', models.PositiveIntegerField()),
                ('relation_type', models.CharField(choices=[(b'Add this', b'Add this'), (b'Content Footer', b'Content Footer'), (b'key_image', b'Key Image'), (b'Model Student Work', b'Model of Student Work'), (b'Page footer', b'Page footer'), (b'Pictures of Practice', b'Pictures of Practice'), (b'resource_carousel', b'Resource Carousel (old)'), (b'resource_carousel_slide', b'Resource Carousel Slide'), (b'Right Rail Primary', b'Right Rail Primary'), (b'Right Rail Secondary', b'Right Rail Secondary')], max_length=b'200', blank=True, help_text=b"A generic text field to tag a relation, like 'primaryphoto'.", null=True, verbose_name=b'Relation Type')),
                ('content_type', models.ForeignKey(to='contenttypes.ContentType')),
                ('idea_category', models.ForeignKey(related_name='relations', to='curricula.IdeaCategory')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LearnerGroup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=31)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LearningObjective',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('text', models.TextField()),
            ],
            options={
                'ordering': ['text'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ads_excluded', models.BooleanField(default=True, help_text=b'If unchecked, this field indicates that external ads are\n        allowed.')),
                ('appropriate_for', bitfield.models.BitField([b'Educator', b'Informal Educator', b'Family', b'Student', b'Kid'], default=None, help_text=b'Select the audience(s) for which this content is\n        appropriate. Selecting audiences means that a separate audience view of\n        the page will exist for those audiences. For a lesson, the only possible\n        choices are Teachers and Informal Educators.\n\n        Note that the text you input in this form serves as the default text.\n        If you indicate this activity is appropriate for both T/IE audiences,\n        you either need to add text variations or the default text must be\n        appropriate for for both audiences.')),
                ('assessment_type', models.CharField(blank=True, max_length=15, null=True, choices=[(b'alternative', b'Alternative Assessment'), (b'authentic', b'Authentic Assessment'), (b'formal', b'Formal Assessment'), (b'formative', b'Formative Assessment'), (b'informal', b'Informal Assessment'), (b'observation', b'Observation'), (b'peer-evaluation', b'Peer Evaluation'), (b'portfolio', b'Portfolio Assessment'), (b'rubric', b'Rubric'), (b'self', b'Self Assessment'), (b'standardized', b'Standardized Testing'), (b'testing', b'Testing')])),
                ('assessment', models.TextField(help_text=b'This field is for a new, lesson-level assessment. It is\n        not impacted by activity-level assessments.', null=True, blank=True)),
                ('background_information', models.TextField(help_text=b'Producers can either copy/paste background information\n        into this field, or click the "import text" link to import background\n        information from all activities in this lesson into this field and edit\n        them. If you click "import text from activities" and revise/override the\n        imported text, note that clicking "import text from activities" again\n        will re-set the text back to the imported version.', null=True, blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('title', models.CharField(help_text=b'GLOBAL: Use the text variations field to create versions\n        for audiences other than the default.', max_length=256)),
                ('id_number', models.CharField(help_text=b'This field is for the internal NG Education ID number.\n        This is required for all instructional content.', max_length=10)),
                ('instructional_pathways', models.BooleanField(default=True, verbose_name=b'Display instructional pathways module')),
                ('is_modular', models.BooleanField(default=True, help_text=b'If unchecked, this field indicates that this lesson should\n        NOT appear as stand-alone outside of a unit view.')),
                ('last_updated_date', models.DateTimeField(auto_now=True)),
                ('other_notes', models.TextField(help_text=b'This field has multiple uses, but one possible use is to\n        indicate the larger context into which the lesson fits. Example: This\n        is lesson 1 in a series of 10 lessons in a unit on Europe.', null=True, blank=True)),
                ('published', models.BooleanField(default=False)),
                ('published_date', models.DateTimeField(null=True, blank=True)),
                ('slug', models.SlugField(help_text=b'The URL slug is auto-generated, but producers should adjust\n        it if: a) punctuation in the title causes display errors; and/or b) the\n        title changes after the slug has been generated.', unique=True)),
                ('subtitle_guiding_question', models.TextField(verbose_name=b'Subtitle or Guiding Question')),
                ('accessibility_notes', models.TextField(null=True, blank=True)),
                ('prior_knowledge', models.TextField(null=True, blank=True)),
                ('relevant_start_date', edumetadata.fields.HistoricalDateField(null=True, blank=True)),
                ('relevant_end_date', edumetadata.fields.HistoricalDateField(null=True, blank=True)),
                ('duration', models.IntegerField(default=0, verbose_name=b'Duration Minutes')),
            ],
            options={
                'ordering': ['title'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LessonActivity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('transition_text', models.TextField(null=True, blank=True)),
                ('order', models.IntegerField(null=True, blank=True)),
                ('activity', models.ForeignKey(to='curricula.Activity')),
                ('lesson', models.ForeignKey(to='curricula.Lesson')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'LessonActivities',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LessonRelation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('object_id', models.PositiveIntegerField()),
                ('relation_type', models.CharField(choices=[(b'Add this', b'Add this'), (b'Content Footer', b'Content Footer'), (b'key_image', b'Key Image'), (b'Model Student Work', b'Model of Student Work'), (b'Page footer', b'Page footer'), (b'Pictures of Practice', b'Pictures of Practice'), (b'resource_carousel', b'Resource Carousel (old)'), (b'resource_carousel_slide', b'Resource Carousel Slide'), (b'Right Rail Primary', b'Right Rail Primary'), (b'Right Rail Secondary', b'Right Rail Secondary')], max_length=b'200', blank=True, help_text=b"A generic text field to tag a relation, like 'primaryphoto'.", null=True, verbose_name=b'Relation Type')),
                ('content_type', models.ForeignKey(to='contenttypes.ContentType')),
                ('lesson', models.ForeignKey(related_name='relations', to='curricula.Lesson')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.TextField()),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ObjectiveRelation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(to='contenttypes.ContentType')),
                ('objective', models.ForeignKey(to='curricula.LearningObjective')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PhysicalSpaceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
                ('is_default', models.NullBooleanField()),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PluginType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
                ('source_url', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('question', models.TextField()),
                ('answer', models.TextField(null=True, blank=True)),
                ('appropriate_for', bitfield.models.BitField([b'Educator', b'Informal Educator', b'Family', b'Student', b'Kid'], default=None, null=True, blank=True)),
                ('activity', models.ForeignKey(to='curricula.Activity')),
            ],
            options={
                'verbose_name': 'Question and Answer',
                'verbose_name_plural': 'Questions and Answers',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResourceItem',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('activity', models.ForeignKey(related_name='+', to='curricula.Activity')),
                ('resource', models.ForeignKey(related_name='instructional_resource', to='resource_carousel.ExternalResource')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('appropriate_for', bitfield.models.BitField([b'Educator', b'Informal Educator', b'Family', b'Student', b'Kid'], default=None)),
                ('url', models.CharField(max_length=128, null=True, blank=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name='children', verbose_name='parent', blank=True, to='curricula.Skill', null=True)),
            ],
            options={
                'ordering': ('tree_id', 'lft'),
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Standard',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('definition', models.TextField(null=True, verbose_name=b'Standard text', blank=True)),
                ('name', models.CharField(max_length=256, null=True, blank=True)),
                ('standard_type', models.IntegerField(choices=[(1, b'Energy Literacy Essential Principles and Fundamental Concepts'), (2, b'IRA/NCTE Standards for the English Language Arts'), (4, b'National Council for Social Studies Curriculum Standards'), (5, b'National Geography Standards'), (6, b'National Science Education Standards'), (7, b'National Standards for Arts Education'), (8, b'National Standards for History'), (3, b'NCTM Principles and Standards for School Mathematics'), (9, b'Ocean Literacy Essential Principles and Fundamental Concepts'), (11, b'Voluntary National Content Standards in Economics'), (12, b'Common Core State Standards for English Language Arts & Literacy'), (13, b'Common Core State Standards for Mathematics'), (14, b'ISTE Standards for Students (ISTE Standards*S)'), (15, b'ISTE Standards for Teachers (ISTE Standards*T)'), (16, b'Next Generation Science Standards'), (17, b'The College, Career & Civic Life (C3) Framework for Social Studies State Standards')])),
                ('state', models.CharField(blank=True, max_length=2, null=True, choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AS', b'American Samoa'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'AA', b'Armed Forces Americas'), (b'AE', b'Armed Forces Europe'), (b'AP', b'Armed Forces Pacific'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'DC', b'District of Columbia'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'GU', b'Guam'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'MP', b'Northern Mariana Islands'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'PR', b'Puerto Rico'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VI', b'Virgin Islands'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('thinkfinity_code', models.CharField(max_length=100, null=True, blank=True)),
                ('url', models.CharField(max_length=256, null=True, blank=True)),
                ('when_updated', models.DateTimeField(auto_now=True, null=True)),
                ('grades', models.ManyToManyField(to='edumetadata.Grade')),
            ],
            options={
                'ordering': ['standard_type', 'name'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TeachingApproach',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TeachingMethodType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TechSetupType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=64)),
            ],
            options={
                'ordering': ['title'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Tip',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('appropriate_for', bitfield.models.BitField([b'Educator', b'Informal Educator', b'Family', b'Student', b'Kid'], default=None)),
                ('content_creation_time', models.DateTimeField(auto_now_add=True)),
                ('id_number', models.CharField(max_length=5, null=True, blank=True)),
                ('tip_type', models.PositiveSmallIntegerField(choices=[(1, b'Tip'), (2, b'Modification')])),
                ('body', models.TextField()),
            ],
            options={
                'ordering': ['category', 'body'],
                'verbose_name_plural': 'Tips & Modifications',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TipCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name='children', verbose_name='parent', blank=True, to='curricula.TipCategory', null=True)),
            ],
            options={
                'ordering': ('tree_id', 'lft'),
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('appropriate_for', bitfield.models.BitField([b'Educator', b'Informal Educator', b'Family', b'Student', b'Kid'], default=None, help_text=b'Select the audience(s) for which this content is\n        appropriate. Selecting audiences means that a separate audience view of\n        the page will exist for those audiences.\n\n        Note that the text you input in this form serves as the default text.\n        If you indicate this unit is appropriate for multiple audiences,\n        you either need to add text variations or the default text must be\n        appropriate for those audiences.')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('id_number', models.CharField(help_text=b'This field is for the internal NG Education ID number.\n        This is required for all instructional content.', max_length=10)),
                ('overview', models.TextField()),
                ('published', models.BooleanField(default=False)),
                ('published_date', models.DateTimeField(null=True, blank=True)),
                ('slug', models.SlugField(help_text=b'The URL slug is auto-generated, but producers should adjust\n        it if: a) punctuation in the title causes display errors; and/or b) the\n        title changes after the slug has been generated.', unique=True, max_length=100)),
                ('subtitle', models.TextField(null=True, blank=True)),
                ('title', models.CharField(help_text=b'GLOBAL: Use the text variations field to create versions\n        for audiences other than the default.', max_length=256, verbose_name=b'Unit Title')),
                ('last_updated_date', models.DateTimeField(auto_now=True)),
                ('relevant_start_date', edumetadata.fields.HistoricalDateField(null=True, blank=True)),
                ('relevant_end_date', edumetadata.fields.HistoricalDateField(null=True, blank=True)),
                ('credit', models.ForeignKey(blank=True, to='credits.CreditGroup', null=True)),
                ('eras', models.ManyToManyField(to='edumetadata.HistoricalEra', null=True, blank=True)),
                ('geologic_time', models.ForeignKey(blank=True, to='edumetadata.GeologicTime', null=True)),
                ('grades', models.ManyToManyField(to='edumetadata.Grade', null=True, blank=True)),
                ('key_image', models.ForeignKey(to='core_media.NGPhoto')),
            ],
            options={
                'ordering': ['title'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UnitLesson',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('transition_text', models.TextField(null=True, blank=True)),
                ('order', models.IntegerField(null=True, blank=True)),
                ('lesson', models.ForeignKey(to='curricula.Lesson')),
                ('unit', models.ForeignKey(to='curricula.Unit')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'UnitLessons',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UnitRelation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('object_id', models.PositiveIntegerField()),
                ('relation_type', models.CharField(choices=[(b'Add this', b'Add this'), (b'Content Footer', b'Content Footer'), (b'key_image', b'Key Image'), (b'Model Student Work', b'Model of Student Work'), (b'Page footer', b'Page footer'), (b'Pictures of Practice', b'Pictures of Practice'), (b'resource_carousel', b'Resource Carousel (old)'), (b'resource_carousel_slide', b'Resource Carousel Slide'), (b'Right Rail Primary', b'Right Rail Primary'), (b'Right Rail Secondary', b'Right Rail Secondary')], max_length=b'200', blank=True, help_text=b"A generic text field to tag a relation, like 'primaryphoto'.", null=True, verbose_name=b'Relation Type')),
                ('content_type', models.ForeignKey(to='contenttypes.ContentType')),
                ('unit', models.ForeignKey(related_name='relations', to='curricula.Unit')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Vocabulary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('activity', models.ForeignKey(related_name='+', to='curricula.Activity')),
                ('glossary_term', models.ForeignKey(to='reference.GlossaryTerm')),
            ],
            options={
                'ordering': ['glossary_term'],
                'verbose_name_plural': 'Vocabulary',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='unit',
            name='lessons',
            field=models.ManyToManyField(to='curricula.Lesson', through='curricula.UnitLesson'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='unit',
            name='secondary_content_types',
            field=models.ManyToManyField(to='edumetadata.AlternateType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='unit',
            name='subjects',
            field=models.ManyToManyField(to='edumetadata.Subject', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='tipcategory',
            unique_together=set([('parent', 'name')]),
        ),
        migrations.AddField(
            model_name='tip',
            name='category',
            field=models.ForeignKey(blank=True, to='curricula.TipCategory', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='skill',
            unique_together=set([('parent', 'name')]),
        ),
        migrations.AddField(
            model_name='lesson',
            name='activities',
            field=models.ManyToManyField(to='curricula.Activity', through='curricula.LessonActivity'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='concepts',
            field=concepts.managers.ConceptManager(to='concepts.Concept', through='concepts.ConceptItem', help_text='Press return to complete each tag.', verbose_name='Concepts'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='credit',
            field=models.ForeignKey(blank=True, to='credits.CreditGroup', help_text=b'All activity-level credits will dynamically display in\n        the lesson credits, broken out by activity number. Only use this\n        field if you need to add additional, lesson-level credits.', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='eras',
            field=models.ManyToManyField(to='edumetadata.HistoricalEra', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='geologic_time',
            field=models.ForeignKey(blank=True, to='edumetadata.GeologicTime', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='grades',
            field=models.ManyToManyField(to='edumetadata.Grade', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='materials',
            field=models.ManyToManyField(help_text=b'This field is for additional, lesson-level materials a\n        teacher will need to provide; for example, new materials needed in\n        order to conduct the lesson-level assessment. Do not repeat activity-\n        specific materials.', to='curricula.Material', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='physical_space_types',
            field=models.ManyToManyField(to='curricula.PhysicalSpaceType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='plugin_types',
            field=models.ManyToManyField(to='curricula.PluginType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='prior_lessons',
            field=models.ManyToManyField(to='curricula.Lesson', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='secondary_content_types',
            field=models.ManyToManyField(to='edumetadata.AlternateType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='subjects',
            field=models.ManyToManyField(to='edumetadata.Subject', null=True, verbose_name=b'Subjects and Disciplines', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='tech_setup_types',
            field=models.ManyToManyField(to='curricula.TechSetupType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lesson',
            name='units',
            field=models.ManyToManyField(to='curricula.Unit', through='curricula.UnitLesson'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='idea',
            name='categories',
            field=models.ManyToManyField(related_name='ideas', through='curricula.CategoryIdea', to='curricula.IdeaCategory'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='idea',
            name='key_image',
            field=models.ForeignKey(blank=True, to='core_media.NGPhoto', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='idea',
            name='source',
            field=models.ForeignKey(related_name='ideas', blank=True, to='acknowledge.Entity', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='categoryidea',
            name='category',
            field=models.ForeignKey(to='curricula.IdeaCategory', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='categoryidea',
            name='idea',
            field=models.ForeignKey(to='curricula.Idea', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='grouping_types',
            field=models.ManyToManyField(to='curricula.GroupingType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='learner_groups',
            field=models.ManyToManyField(to='curricula.LearnerGroup', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='lessons',
            field=models.ManyToManyField(to='curricula.Lesson', through='curricula.LessonActivity'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='materials',
            field=models.ManyToManyField(to='curricula.Material', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='physical_space_types',
            field=models.ManyToManyField(to='curricula.PhysicalSpaceType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='plugin_types',
            field=models.ManyToManyField(to='curricula.PluginType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='prior_activities',
            field=models.ManyToManyField(to='curricula.Activity', null=True, verbose_name=b'Recommended Prior Activities', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='resource_items',
            field=models.ManyToManyField(to='resource_carousel.ExternalResource', through='curricula.ResourceItem'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='secondary_content_types',
            field=models.ManyToManyField(to='edumetadata.AlternateType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='skills',
            field=models.ManyToManyField(to='curricula.Skill', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='standards',
            field=models.ManyToManyField(to='curricula.Standard', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='subjects',
            field=models.ManyToManyField(to='edumetadata.Subject', null=True, verbose_name=b'Subjects and Disciplines', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='teaching_approaches',
            field=models.ManyToManyField(to='curricula.TeachingApproach', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='teaching_method_types',
            field=models.ManyToManyField(to='curricula.TeachingMethodType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='tech_setup_types',
            field=models.ManyToManyField(to='curricula.TechSetupType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='tips',
            field=models.ManyToManyField(to='curricula.Tip', null=True, verbose_name=b'Tips & Modifications', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='activity',
            name='vocabulary',
            field=models.ManyToManyField(to='reference.GlossaryTerm', through='curricula.Vocabulary'),
            preserve_default=True,
        ),
    ]
